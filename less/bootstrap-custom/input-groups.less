/**
  * @stylesheet input-groups.less Input Groups
  * @parent components 4
  *
  * @description
  * Extend form controls by adding text or buttons before, after, or on both sides
  * of any text-based `<input>`. Use `.input-group` with an `.input-group-addon`
  * to prepend or append elements to a single .form-control.
  *
  * ##### Textual `<input>`s only
  * Avoid using `<select>` elements here as they cannot be fully styled in
  * WebKit browsers.
  *
  * Avoid using `<textarea>` elements here as their rows attribute will not be
  * respected in some cases.
  *
  * #### Tooltips & popovers in input groups require special setting
  * When using tooltips or popovers on elements within an `.input-group`, you'll
  * have to specify the option container: `body` to avoid unwanted side effects
  * (such as the element growing wider and/or losing its rounded corners when the
  * tooltip or popover is triggered).
  *
  * #### Don't mix with other components
  * Do not mix form groups or grid column classes directly with input groups.
  *
  * Instead, nest the input group inside of the form group or grid-related element.
  *
  * #### Always add labels
  * Screen readers will have trouble with your forms if you don't include a label
  * for every input. For these input groups, ensure that any additional label or
  * functionality is conveyed to assistive technologies.
  *
  * The exact technique to be used (`<label>` elements hidden using the `sr-only class`.,
  * or use of the `aria-label`, `aria-labelledby`, `aria-describedby`, `title`
  * or `placeholder` attribute) and what additional information will need to be
  * conveyed will vary depending on the exact type of interface widget you're
  * implementing. The examples in this section provide a few suggested,
  * case-specific approaches.
  **/
  /**
  @styles basic-example
  @parent input-groups.less 1
  * ## Basic Example
  * Place one add-on or button on either side of an input. You may also place one
  * on both sides of an input.
  *
  * **We do not support multiple add-ons on a single side.**
  *
  * **We do not support multiple form-controls in a single input group.**
  * @demo demos/input-groups/basic-example/demo.html
  **/
  /**
  @styles sizing
  @parent input-groups.less 2
  * ## Sizing
  * Add the relative form sizing classes to the `.input-group` itself and contents
  * within will automatically resizeâ€”no need for repeating the form control size
  * classes on each element.
  * @demo demos/input-groups/sizing/demo.html
  **/
  /**
  @styles checkboxes-radio-addons
  @parent input-groups.less 3
  * ## Checkboxes and radio addons
  * Place any checkbox or radio option within an input group's addon instead
  * of text.
  * @demo demos/input-groups/checkboxes-radios/demo.html
  **/
  /**
  @styles button-addons
  @parent input-groups.less 4
  * ## Button Addons
  * Buttons in input groups are a bit different and require one extra level of
  * nesting. Instead of `.input-group-addon`, you'll need to use `.input-group-btn`
  * to wrap the buttons. This is required due to default browser styles that
  * cannot be overridden.
  * @demo demos/input-groups/button-addons/demo.html
  **/
  /**
  @styles button-dropdowns
  @parent input-groups.less 5
  * ## Button with Dropdowns
  * @demo demos/input-groups/button-dropdowns/demo.html
  **/
  /**
  @styles segmented-buttons
  @parent input-groups.less 6
  * ## Segmented Buttons
  * @demo demos/input-groups/segmented-buttons/demo.html
  **/

  //** Background color for textual input addons
  @input-group-addon-bg:           @gray-lighter;
  //** Border color for textual input addons
  @input-group-addon-border-color: @input-border;
